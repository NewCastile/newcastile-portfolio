---
import CloseIcon from "../icons/Close.astro";
import HamburguerIcon from "../icons/Hamburguer.astro";
import {
    getLangFromUrl,
    useTranslations,
    useTranslatedPath,
} from "../../i18n/utils.ts";
import type { NavItems } from "../../types";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const navItems: NavItems[] = [
    {
        title: t("navbar.projects"),
        label: "projects",
        url: translatePath("/#projects", lang),
    },
    {
        title: t("navbar.certificates"),
        label: "certificates",
        url: translatePath("/#certificates", lang),
    },
    {
        title: t("navbar.about-me"),
        label: "about-me",
        url: translatePath("/#about-me", lang),
    },
    {
        title: t("navbar.home"),
        label: "home",
        url: translatePath("/#home", lang),
    },
];
---

<header
    class="fixed top-0 z-10 flex flex-row items-center justify-center w-full px-10 py-2 mobile:px-0 mobile:py-0"
>
    <button
        id="toggle-navbar-button"
        class="absolute z-10 block p-4 rounded-full top-14 right-10 sm:hidden bg-slate-400/30 dark:bg-slate-900/90 backdrop-blur focus:outline-none dark:text-gray-300"
    >
        <CloseIcon data-toggle-status="close" data-toggle-navbar-icon />
        <HamburguerIcon data-toggle-status="open" data-toggle-navbar-icon />
    </button>
    <nav
        class="flex-col items-center justify-center hidden px-8 py-4 font-bold rounded-md shadow-lg bg-white/40 dark:bg-slate-500/90 text-inherit dark:text-gray-200 backdrop-blur ring-1 ring-white/10 w-max sm:flex"
    >
        <ul role="list" class="flex-row items-center justify-center gap-8">
            {
                navItems.map((link) => (
                    <li>
                        <a
                            class="text-sm uppercase transition w-max"
                            aria-label={link.label}
                            href={link.url}
                        >
                            {link.title}
                        </a>
                    </li>
                ))
            }
        </ul>
    </nav>
    <nav
        id="responsive-navbar-container"
        class={"z-5 animate-fade-in backdrop-blur-xl absolute right-0 top-0 bg-slate-400/60 dark:bg-slate-800/90 dark:text-gray-300 flex h-screen w-full flex-col items-center justify-center py-10 px-16 sm:hidden"}
    >
        <ul class="flex flex-col justify-start items-center gap-8" role="list">
            {
                navItems.map((link) => (
                    <li>
                        <span
                            role="link"
                            data-link-url={link.url}
                            class="w-full text-lg font-bold text-left uppercase transition cursor-pointer"
                            aria-label={link.label}
                        >
                            {link.title}
                        </span>
                    </li>
                ))
            }
        </ul>
    </nav>
</header>
<script is:inline>
    let status = "close";
    let width = 0;

    const toggleNavbarButton = document.getElementById("toggle-navbar-button");
    const toggleNavbarIcons = document.querySelectorAll(
        "[data-toggle-navbar-icon]",
    );
    const responsiveNavbarContainer = document.getElementById(
        "responsive-navbar-container",
    );

    const toggleNavbarVisibility = (status) => {
        responsiveNavbarContainer.classList.toggle(
            ["flex", "animate-fade-in"],
            status === "open",
        );
        responsiveNavbarContainer.classList.toggle("hidden", status !== "open");
    };

    toggleNavbarVisibility(status);

    const toggleIconVisibility = (status) => {
        toggleNavbarIcons.forEach((icon) => {
            const toggleStatus = icon.getAttribute("data-toggle-status");
            icon.classList.toggle("inline-block", toggleStatus !== status);
            icon.classList.toggle("hidden", toggleStatus === status);
        });
    };

    toggleIconVisibility(status);

    const toggleStatus = (forcedStatus) => {
        if (forcedStatus) {
            status = forcedStatus;
            return;
        }
        if (status === "close") {
            status = "open";
        } else {
            status = "close";
        }
    };

    const toggleNavbar = (forcedStatus) => {
        toggleStatus(forcedStatus);
        toggleIconVisibility(status);
        toggleNavbarVisibility(status);
    };

    const navbarButtonOnClickHandler = (event) => {
        event.stopPropagation();
        toggleNavbar();
    };

    const observerCallback = (entries) => {
        const entry = entries[0];
        if (entry.contentBoxSize) {
            const contentBoxSize = Array.isArray(entry.contentBoxSize)
                ? entry.contentBoxSize[0]
                : entry.contentBoxSize;
            width = contentBoxSize.inlineSize;
            if (contentBoxSize.inlineSize === 0) {
                toggleNavbar("close");
                return;
            }
        } else {
            //
        }
    };

    const observer = new ResizeObserver((entries) => {
        observerCallback(entries);
    });

    observer.observe(responsiveNavbarContainer);

    toggleNavbarButton.addEventListener("click", navbarButtonOnClickHandler);

    responsiveNavbarContainer.addEventListener("click", (event) => {
        const target = event.target;
        if (target && target.getAttribute("data-link-url")) {
            const url = target.getAttribute("data-link-url");
            toggleNavbar();
            window.location = url;
        }
    });

    document.addEventListener("keyup", (event) => {
        if (event.key == "Escape") {
            navbarButtonOnClickHandler();
        }
    });
</script>
