---
import CloseIcon from "../icons/Close.astro";
import HamburguerIcon from "../icons/Hamburguer.astro";
import {
    getLangFromUrl,
    useTranslations,
    useTranslatedPath,
} from "../../i18n/utils.ts";
import type { NavItems } from "../../types";
import ThemeButton from "./ThemeButton.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const navItems: NavItems[] = [
    {
        title: t("navbar.projects"),
        label: "projects",
        url: translatePath("/#projects", lang),
    },
    {
        title: t("navbar.certificates"),
        label: "certificates",
        url: translatePath("/#certificates", lang),
    },
    {
        title: t("navbar.about-me"),
        label: "about-me",
        url: translatePath("/#about-me", lang),
    },
    {
        title: t("navbar.home"),
        label: "home",
        url: translatePath("/#home", lang),
    },
];
---

<astro-navbar
    class="fixed top-0 z-10 flex flex-row items-center justify-center sm:justify-end md:justify-center w-full px-10 py-2 mobile:px-0 mobile:py-0"
>
    <button
        id="toggle-navbar-button"
        class="absolute z-10 block h-max p-4 rounded-full overflow-hidden top-14 right-10 sm:hidden bg-slate-400/30 dark:bg-slate-900/90 backdrop-blur focus:outline-none dark:text-gray-300"
    >
        <div class="h-7">
            <HamburguerIcon data-toggle-status="OPEN" data-toggle-navbar-icon />
            <CloseIcon
                class:list={"hidden"}
                data-toggle-status="CLOSE"
                data-toggle-navbar-icon
            />
        </div>
    </button>
    <nav
        class="flex-col items-center justify-center hidden px-8 py-4 font-bold rounded-md shadow-lg bg-white/40 dark:bg-slate-900/90 text-inherit dark:text-gray-200 backdrop-blur ring-1 ring-white/10 sm:flex"
    >
        <ul role="list" class="flex flex-row items-center justify-center gap-8">
            {
                navItems.map((link) => (
                    <li class="w-max">
                        <a
                            class="text-sm uppercase transition w-max"
                            aria-label={link.label}
                            href={link.url}
                        >
                            {link.title}
                        </a>
                    </li>
                ))
            }
            <li class="w-max relative"><ThemeButton /></li>
        </ul>
    </nav>
    <nav
        id="responsive-navbar-container"
        data-responsive-navbar-status="CLOSE"
        class={"z-5 hidden backdrop-blur-xl absolute right-0 top-0 bg-slate-400/60 dark:bg-slate-800/90 dark:text-gray-300 h-screen w-full py-10 px-16 sm:hidden"}
    >
        <ul class="flex flex-col justify-start items-center gap-8" role="list">
            {
                navItems.map((link) => (
                    <li>
                        <span
                            role="link"
                            data-responsive-navbar-link
                            data-link-url={link.url}
                            class="w-full text-lg font-bold text-left uppercase transition cursor-pointer"
                            aria-label={link.label}
                        >
                            {link.title}
                        </span>
                    </li>
                ))
            }
            <li class="w-max absolute top-32 right-11"><div class="relative w-max"><ThemeButton /></div></li>
        </ul>
    </nav>
</astro-navbar>
<script is:inline>
    const getTheme = () => {
        if (typeof localStorage !== "undefined") {
            return localStorage.getItem("theme") ?? "system";
        }

        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
    };

    const theme = getTheme();

    const $themeMenuButtonIcons = document.querySelectorAll(
        "[data-theme-button-icon]"
    );

    const updateThemeButtonContent = (theme) => {
        $themeMenuButtonIcons.forEach((icon) => {
            const id = icon.id;
            icon.classList.toggle("block", id === theme);
            icon.classList.toggle("hidden", id !== theme);
        });
    };

    const updateTheme = (theme) => {
        const element = document.documentElement;
        element.classList.toggle("dark", theme !== "light");

        localStorage.setItem("theme", theme);
        updateThemeButtonContent(theme);
    };

    updateTheme(theme);
</script>
<script>
    const openClasses = [
        "flex",
        "flex-col",
        "items-center",
        "justify-center",
        "animate-fade-in",
    ];
    const closeClasses = ["hidden"];
    class Navbar extends HTMLElement {
        constructor() {
            super();
            const $toggleNavbarButton = this.querySelector(
                "#toggle-navbar-button",
            );
            const $toggleNavbarIcons = this.querySelectorAll(
                "[data-toggle-navbar-icon]",
            );
            const $responsiveNavbarContainer = this.querySelector(
                "#responsive-navbar-container",
            );

            const $responsiveNavbarLinks = this.querySelectorAll(
                "[data-responsive-navbar-link]",
            );

            const toggleNavbarVisibility = (status: string) => {
                if ($responsiveNavbarContainer) {
                    switch (status) {
                        case "OPEN":
                            $responsiveNavbarContainer.classList.remove(
                                ...closeClasses,
                            );
                            $responsiveNavbarContainer.classList.add(
                                ...openClasses,
                            );

                            break;
                        case "CLOSE":
                            $responsiveNavbarContainer.classList.remove(
                                ...openClasses,
                            );
                            $responsiveNavbarContainer.classList.add(
                                ...closeClasses,
                            );
                            break;
                    }
                }
            };

            const toggleIconVisibility = (status: string) => {
                $toggleNavbarIcons.forEach((icon) => {
                    const iconStatus = icon.getAttribute("data-toggle-status");

                    icon.classList.toggle(
                        "inline-block",
                        iconStatus !== status,
                    );

                    icon.classList.toggle("hidden", iconStatus === status);
                });
            };

            const toggleStatus = (forcedStatus?: string) => {
                if ($responsiveNavbarContainer) {
                    if (forcedStatus) {
                        $responsiveNavbarContainer.setAttribute(
                            "data-responsive-navbar-status",
                            forcedStatus,
                        );
                        return;
                    }
                    const currentStatus =
                        $responsiveNavbarContainer.getAttribute(
                            "data-responsive-navbar-status",
                        );
                    switch (currentStatus) {
                        case "CLOSE":
                            $responsiveNavbarContainer.setAttribute(
                                "data-responsive-navbar-status",
                                "OPEN",
                            );
                        case "OPEN":
                            $responsiveNavbarContainer.setAttribute(
                                "data-responsive-navbar-status",
                                "CLOSE",
                            );
                            break;
                    }
                }
            };

            const toggleNavbar = (forcedStatus?: string) => {
                if ($responsiveNavbarContainer) {
                    if (forcedStatus) {
                        toggleStatus(forcedStatus);
                        toggleIconVisibility(forcedStatus);
                        toggleNavbarVisibility(forcedStatus);
                        return;
                    }

                    const status = $responsiveNavbarContainer.getAttribute(
                        "data-responsive-navbar-status",
                    );
                    switch (status) {
                        case "CLOSE":
                            toggleStatus("OPEN");
                            toggleIconVisibility("OPEN");
                            toggleNavbarVisibility("OPEN");
                            break;
                        case "OPEN":
                            toggleStatus("CLOSE");
                            toggleIconVisibility("CLOSE");
                            toggleNavbarVisibility("CLOSE");
                            break;
                    }
                }
            };

            const navbarButtonOnClickHandler = (event: Event) => {
                event.stopPropagation();
                toggleNavbar();
            };

            const observerCallback = (entries: ResizeObserverEntry[]) => {
                const entry = entries[0];
                if (entry.contentBoxSize) {
                    const contentBoxSize = Array.isArray(entry.contentBoxSize)
                        ? entry.contentBoxSize[0]
                        : entry.contentBoxSize;
                    if (contentBoxSize.inlineSize === 0) {
                        toggleNavbar("CLOSE");
                        return;
                    }
                } else {
                    //
                }
            };

            const observer = new ResizeObserver((entries) => {
                observerCallback(entries);
            });

            if ($responsiveNavbarContainer) {
                observer.observe($responsiveNavbarContainer);
            }

            if ($toggleNavbarButton) {
                $toggleNavbarButton.addEventListener("click", (event) => {
                    navbarButtonOnClickHandler(event);
                });
            }

            $responsiveNavbarLinks.forEach((link) => {
                if (link) {
                    const url = link.getAttribute("data-link-url");
                    if (url) {
                        link.addEventListener("click", (event) => {
                            event.preventDefault();
                            toggleNavbar();
                            document.location.href = url;
                        });
                    }
                }
            });

            document.documentElement.addEventListener("keyup", (event) => {
                if (event.key == "Escape") {
                    navbarButtonOnClickHandler(event);
                }
            });
        }
    }

    customElements.define("astro-navbar", Navbar);
</script>

