---
import MoonIcon from "../icons/Moon.astro";
import SunIcon from "../icons/Sun.astro";
import DesktopIcon from "../icons/Desktop.astro";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<astro-theme-button
    class="flex w-full sm:w-max flex-row items-center justify-start py-2 sm:top-0"
>
    <div class="relative">
        <button
            aria-label="Open Themes Menu"
            id="toggle-theme-button"
            data-dropdown-toggle="themes-menu"
            class="inline-flex w-max rounded-md bg-slate-400/30 px-4 py-3 align-baseline font-bold uppercase text-inherit shadow-lg backdrop-blur dark:bg-slate-900/90"
            type="button"
        >
            <SunIcon width="20" height="20" id="light" data-theme-button-icon class="opacity-100" />
            <MoonIcon width="20" height="20" id="dark" data-theme-button-icon class="opacity-100" />
            <DesktopIcon
                width="20" 
                height="20"
                id="system"
                data-theme-button-icon
                class="opacity-100"
            />
        </button>
        <div
            id="themes-menu"
            class="absolute right-0 top-20 hidden w-40 rounded-lg bg-slate-400/30 shadow dark:bg-slate-900"
        >
            <ul
                class="py-2 text-sm dark:text-gray-200"
                aria-labelledby="theme-button"
            >
                <li>
                    <button
                        data-toggle-theme-button
                        data-theme="light"
                        class="w-full px-4 py-2 text-right text-lg font-bold hover:bg-gray-100 hover:underline hover:underline-offset-4 hover:decoration-indigo-400 hover:decoration-4 dark:hover:bg-slate-800 dark:hover:decoration-pink-500 dark:hover:decoration-4"
                    >
                        {t("theme.light")}
                    </button>
                </li>
                <li>
                    <button
                        data-toggle-theme-button
                        data-theme="dark"
                        class="w-full px-4 py-2 text-right text-lg font-bold hover:bg-gray-100 hover:underline hover:underline-offset-4 hover:decoration-indigo-400 hover:decoration-4 dark:hover:bg-slate-800 dark:hover:decoration-pink-500 dark:hover:decoration-4"
                    >
                        {t("theme.dark")}
                    </button>
                </li>
                <li>
                    <button
                        data-toggle-theme-button="system"
                        data-theme="system"
                        class="w-full items-baseline px-4 py-2 text-right text-lg font-bold hover:bg-gray-100 hover:underline hover:underline-offset-4 hover:decoration-indigo-400 hover:decoration-4 dark:hover:bg-slate-800 dark:hover:text-white dark:hover:decoration-pink-500 dark:hover:decoration-4"
                    >
                        {t("theme.system")}
                    </button>
                </li>
            </ul>
        </div>
    </div>
</astro-theme-button>
<style>
    #themes-menu.open {
        display: block;
        animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94)
            both;
    }

    @keyframes scale-up-center {
        from {
            transform: scale(0.8);
            opacity: 0;
        }

        to {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>
<script src="../../scripts/astro-theme-button.ts"></script>
<!-- <script is:inline>
    const getTheme = () => {
        if (typeof localStorage !== "undefined") {
            return localStorage.getItem("theme") ?? "system";
        }

        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
    };

    const theme = getTheme();
    const themeMenuButton = document.getElementById("toggle-theme-button");
    const themeMenuButtonIcons = document.querySelectorAll(
        "[data-theme-button-icon]",
    );
    const themesMenu = document.getElementById("themes-menu");

    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");

    const toggleMenuVisibility = () => {
        themesMenu.classList.toggle("hidden");
        themesMenu.classList.toggle("open");
    };

    const updateThemeButtonContent = (theme) => {
        themeMenuButtonIcons.forEach((icon) => {
            const id = icon.id;
            icon.classList.toggle("block", id === theme);
            icon.classList.toggle("hidden", id !== theme);
        });
    };

    const handleToggleMenuButtonClick = () => {
        toggleMenuVisibility();
    };

    themeMenuButton.addEventListener("click", (event) => {
        event.stopPropagation();
        handleToggleMenuButtonClick();
    });

    const updateTheme = (theme) => {
        const element = document.documentElement;
        element.classList.toggle("dark", theme !== "light");

        localStorage.setItem("theme", theme);
        updateThemeButtonContent(theme);
    };

    updateTheme(theme);

    const handleToggleThemeButtonClick = (theme) => {
        updateTheme(theme);
    };

    themesMenu.addEventListener("click", (event) => {
        event.stopPropagation();
        if (event.target.tagName === "BUTTON") {
            const theme = event.target.getAttribute("data-theme");
            handleToggleThemeButtonClick(theme ?? "system");
            toggleMenuVisibility();
        }
    });

    matchMedia.addEventListener("change", () => {
        const theme = getTheme();
        updateTheme(theme);
    });

    const onClickOutside = (selector, cb) => {
        document.addEventListener("click", (event) => {
            const selectedElement = document.querySelector(selector);
            const targetElement = event.currentTarget;
            if (!selectedElement.contains(targetElement) && targetElement) cb();
        });
    };

    // Using
    onClickOutside("#themes-menu", () => {
        themesMenu.classList.add("hidden");
        themesMenu.classList.remove("open");
    });
</script> -->
